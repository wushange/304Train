package cn.connxun.train.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.connxun.train.entity.VideoClass;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIDEO_CLASS".
*/
public class VideoClassDao extends AbstractDao<VideoClass, Long> {

    public static final String TABLENAME = "VIDEO_CLASS";

    /**
     * Properties of entity VideoClass.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Coursename = new Property(1, String.class, "coursename", false, "COURSENAME");
        public final static Property Coursedesc = new Property(2, String.class, "coursedesc", false, "COURSEDESC");
        public final static Property Coursepic = new Property(3, String.class, "coursepic", false, "COURSEPIC");
        public final static Property Coursetype = new Property(4, int.class, "coursetype", false, "COURSETYPE");
        public final static Property Datetime = new Property(5, long.class, "datetime", false, "DATETIME");
        public final static Property State = new Property(6, int.class, "state", false, "STATE");
        public final static Property Userid = new Property(7, int.class, "userid", false, "USERID");
        public final static Property Courseid = new Property(8, int.class, "courseid", false, "COURSEID");
    }


    public VideoClassDao(DaoConfig config) {
        super(config);
    }
    
    public VideoClassDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIDEO_CLASS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"COURSENAME\" TEXT," + // 1: coursename
                "\"COURSEDESC\" TEXT," + // 2: coursedesc
                "\"COURSEPIC\" TEXT," + // 3: coursepic
                "\"COURSETYPE\" INTEGER NOT NULL ," + // 4: coursetype
                "\"DATETIME\" INTEGER NOT NULL ," + // 5: datetime
                "\"STATE\" INTEGER NOT NULL ," + // 6: state
                "\"USERID\" INTEGER NOT NULL ," + // 7: userid
                "\"COURSEID\" INTEGER NOT NULL );"); // 8: courseid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIDEO_CLASS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VideoClass entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String coursename = entity.getCoursename();
        if (coursename != null) {
            stmt.bindString(2, coursename);
        }
 
        String coursedesc = entity.getCoursedesc();
        if (coursedesc != null) {
            stmt.bindString(3, coursedesc);
        }
 
        String coursepic = entity.getCoursepic();
        if (coursepic != null) {
            stmt.bindString(4, coursepic);
        }
        stmt.bindLong(5, entity.getCoursetype());
        stmt.bindLong(6, entity.getDatetime());
        stmt.bindLong(7, entity.getState());
        stmt.bindLong(8, entity.getUserid());
        stmt.bindLong(9, entity.getCourseid());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VideoClass entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String coursename = entity.getCoursename();
        if (coursename != null) {
            stmt.bindString(2, coursename);
        }
 
        String coursedesc = entity.getCoursedesc();
        if (coursedesc != null) {
            stmt.bindString(3, coursedesc);
        }
 
        String coursepic = entity.getCoursepic();
        if (coursepic != null) {
            stmt.bindString(4, coursepic);
        }
        stmt.bindLong(5, entity.getCoursetype());
        stmt.bindLong(6, entity.getDatetime());
        stmt.bindLong(7, entity.getState());
        stmt.bindLong(8, entity.getUserid());
        stmt.bindLong(9, entity.getCourseid());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public VideoClass readEntity(Cursor cursor, int offset) {
        VideoClass entity = new VideoClass( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // coursename
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // coursedesc
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // coursepic
            cursor.getInt(offset + 4), // coursetype
            cursor.getLong(offset + 5), // datetime
            cursor.getInt(offset + 6), // state
            cursor.getInt(offset + 7), // userid
            cursor.getInt(offset + 8) // courseid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VideoClass entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setCoursename(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCoursedesc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCoursepic(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCoursetype(cursor.getInt(offset + 4));
        entity.setDatetime(cursor.getLong(offset + 5));
        entity.setState(cursor.getInt(offset + 6));
        entity.setUserid(cursor.getInt(offset + 7));
        entity.setCourseid(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(VideoClass entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(VideoClass entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VideoClass entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
